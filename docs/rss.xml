<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>Todos os Posts</title>
        <link>https://algumcorrupto.github.io/IFF-depressao/</link>
        <description><![CDATA[Todos os Posts da página IFF da Depressão]]></description>
        <atom:link href="https://algumcorrupto.github.io/IFF-depressao//rss.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Tue, 26 Nov 2024 00:00:00 UT</lastBuildDate>
        <item>
    <title>Modelos computacionais</title>
    <link>https://algumcorrupto.github.io/IFF-depressao//posts/2024-11-26-von-newmann.html</link>
    <description><![CDATA[<article>
    <section class="title">Modelos computacionais</section>
    <p class="filler">=========================================</p>
    <section class="header">
        Postado em November 26, 2024
        
            por Paulo
        
    </section>
    <section class="body">
        <h1 id="modelo-von-neumann-arquiteturas-computacionais-modernas">Modelo Von Neumann &amp; Arquiteturas computacionais modernas</h1>
<p>O modelo/arquitetura Von Neumann é um modelo computacional que descreve os componentes básicos para a computação. Criado em meados dos anos ’40, esse foi um modelo bastante influencial.</p>
<p>Aqui está um diagrama que descreve o modelo:</p>
<figure>
<img src="/images/von-n1.png" alt="Diagrama Von Neumann" />
<figcaption aria-hidden="true">Diagrama Von Neumann</figcaption>
</figure>
<p>De maneira mais textual o modelo descreve 3 componentes básicos da computação:</p>
<ul>
<li><p>Entrada, ou dados que são inseridos para processamento</p></li>
<li><p>Processamento</p></li>
<li><p>Saída, informações que é resultado do processamento da entrada</p></li>
</ul>
<p>Sendo que o componente “Processamento” é dividido em 2 sub-compoentes</p>
<ul>
<li><p>Processador, aquilo que executa instruções geralmente passo-a-passo</p></li>
<li><p>Memória, aquilo que armazena os dados processados durante o tempo de execução</p></li>
</ul>
<p>Novamente temos agora o componente “Processador” dividido em 2 ou 3 sub-componentes</p>
<ul>
<li><p>Unidade de Controle, aquele que mantém o estado sobre o que aplicação está executando no momento</p></li>
<li><p>Unidade de aritmética/lógica, a unidade que faz cálculos aritméticos</p></li>
<li><p>Registradores, alguns autores referem-se os registradores sendo um terceiro sub-componente. Registradores em minha opinião nada mais são que memória extra só que de um nível de acesso mais rápido.</p></li>
</ul>
<p>Hoje em dia a maioria senão todos os <i>hardwares</i> de computação modernos contém como base o modelo Von Neumann.</p>
<figure>
<img src="/images/nes-arch.png" alt="Até o nintendinho usa como base o modelo Von Neumann!" />
<figcaption aria-hidden="true">Até o nintendinho usa como base o modelo Von Neumann!</figcaption>
</figure>
<h1 id="modelo-de-turing-assembly">Modelo de Turing &amp; Assembly</h1>
<p>Alan Turing tese criou uma máquina abstrata em que seu comportamento define o que é e não é computável. O que essa máquina consegue calcular tendo memória infinita é considerado <u>computável</u>, caso contrário é <u>não computável</u>.</p>
<p>Essa máquina de turing opera em uma fita infinita, tal que é dividida em várias células. Cada célula contém uma símbolo de um conjunto finito de símbolos chamado “alfabeto da máquina”. A máquina de turing tem uma agulha que fica em cima dessa essa fita. Cada passo de execução essa máquina ler o símbolo da célula que essa agulha está sobreposta, Então baseado em seu estado atual e célula lida, a máquina então pode:</p>
<ul>
<li><p>Escrever um símbolo na célula atual e mover essa agulha para esquerda ou direita.</p></li>
<li><p>Simplesmente só mover essa agulha para esquerda ou direita.</p></li>
<li><p>Ou parar a execução desse programa.</p></li>
</ul>
<p>As linguagens da família assembly são um exemplo de máquina de turing! Onde os símbolos são os <i>opcodes</i>, o alfabeto é o <i>instruction set</i>, a agulha é o <i>stack pointer</i> e o estado atual é a memória.</p>
<h1 id="cálculo-lambda">Cálculo lambda</h1>
<p>Cálculo lambda é um outro modelo computacional, criado também para descrever o que e não é computável – mesma finalidade do modelo de Turing – e coincidentemente criado pelo instrutor de doutorado do Turing, Alonso Church.</p>
<p>Esse na minha opinião esse é o modelo mais abstrato e matemático comparado entre os 3 já mencionados e por natureza um pouco mais complicado de entender. Eu também não tenho uma qualificação ideal para explicar esses modelo corretamente, então recomendo bastante a série sobre programação funcional da UFABC, que é a melhor que já encontrei no youtube discutindo sobre o assunto: <a href="https://www.youtube.com/watch?v=U7gdzYiFJKg&amp;list=PLYItvall0TqJ25sVTLcMhxsE0Hci58mpQ">link da série</a>.</p>
    </section>
</article>
]]></description>
    <pubDate>Tue, 26 Nov 2024 00:00:00 UT</pubDate>
    <guid>https://algumcorrupto.github.io/IFF-depressao//posts/2024-11-26-von-newmann.html</guid>
    <dc:creator>Paulo Villaça</dc:creator>
</item>
<item>
    <title>C Moderno</title>
    <link>https://algumcorrupto.github.io/IFF-depressao//posts/2024-11-24-c-moderno.html</link>
    <description><![CDATA[<article>
    <section class="title">C Moderno</section>
    <p class="filler">=========================================</p>
    <section class="header">
        Postado em November 24, 2024
        
            por Paulo
        
    </section>
    <section class="body">
        <p>C é uma linguagem que é bastante antiga e com uma comunidade bastante madura, em início de sua história ocorreram bastantes mudanças, mais notavelmente do C estilo K&amp;R para o popular ANSI C, que é usado como ferramenta de aprendizado mundialmente em várias instituições de ensino com o objetivo de introduzir tópicos relacionados a programação e algoritmos de uma maneira mais prática.</p>
<p>No entanto a linguagem de programação C continua evoluindo e novos recursos vem sendo adicionados com o objetivo de moderniza-la para que ela continue sendo competitiva com as demais novas linguagens de programação que surgiram nesses últimos anos.</p>
<p>O C moderno é padronizado pela <a href="https://www.open-std.org/jtc1/sc22/wg14/">ISO/IEC JTC1/SC22/WG14</a>, organização que padroniza a linguagem C desde 1990 até os dias atuais 2014, tendo a última atualização no documento agora em 28 de julho de 2024.</p>
<p>Nesse artigo vamos documentar alguns dos novos recursos que mais achei interessante e talvez mude a maneira que você programe nessa linguagem.</p>
<h1 id="bitint">_BitInt</h1>
<p><code>_BitInt()</code>, antes chamado de <code>_Extint</code> em propóstas passadas é um tipo de largura-bit arbitrário, ou seja, permite você criar números inteiros de qualquer tamanho. É análogo a recurso da linguagem zig que permite o mesmo comportamento.</p>
<p>Mas quais seriam os casos de uso do <code>_BitInt()</code>? Imagina que você está escrevendo um sistema para fazer a conversão de strings em Base64 para strings padrão? Um caractere Base64 tem 6 bits de largura, então um valor de tipo <code>_BitInt(6)</code> seria ideal para armazenar o valor desse carectere 6 bits-wide.</p>
<p>Ou até pode ser usado para armazenar números extremamente grandes.</p>
<h3 id="exemplo-_bitint">Exemplo _BitInt:</h3>
<div class="sourceCode" id="cb1"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="co">// exemplo trabalhando com números extremamente grandes</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;stdio.h&gt;</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> main<span class="op">(</span><span class="dt">void</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>    <span class="dt">_BitInt</span> <span class="op">(</span><span class="dv">1048576</span><span class="op">)</span> x <span class="op">=</span> <span class="op">((</span><span class="dt">_BitInt</span> <span class="op">(</span><span class="dv">1048576</span><span class="op">))</span> <span class="dv">1</span><span class="op">)</span> <span class="op">&lt;&lt;</span> <span class="op">(</span><span class="dv">1</span> <span class="op">&lt;&lt;</span> <span class="dv">20</span><span class="op">);</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>    <span class="dt">bool</span> is_even <span class="op">=</span> x <span class="op">%</span> <span class="dv">2</span> <span class="op">==</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>    puts<span class="op">(</span> <span class="op">(</span>is_even<span class="op">)</span> <span class="op">?</span> <span class="st">&quot;2^(2^20) é par!&quot;</span> <span class="op">:</span> <span class="st">&quot;2^(2^20) é impar!&quot;</span> <span class="op">);</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<h3 id="esse-programa-produz-a-saída">Esse programa produz a saída:</h3>
<pre><code>2^(2^20) é par!</code></pre>
<p>Atualmente esse recurso está para ser amplamente implementado depois de 2025, atualmente até por onde eu sei apenas LLVM/Clang tem uma implementação do <code>_BitInt</code>.</p>
<h1 id="stdarg.h">stdarg.h</h1>
<p><code>stdarg.h</code> define comportamentos com funções similares ao <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters">rest parameters do javascript</a>, em que são para que funções aceitem um número indefinido de parâmetros.</p>
<h3 id="exemplo-sobre-stdarg.h-da-wikipedia">Exemplo sobre <code>stdarg.h</code> da wikipedia:</h3>
<div class="sourceCode" id="cb3"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="co">// somatório de números</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;stdio.h&gt;</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;stdarg.h&gt;</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a><span class="co">// primeiro argumento é a quantidade de valores</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> somatorio<span class="op">(</span><span class="dt">int</span> count<span class="op">,</span> <span class="op">...)</span></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>  <span class="dt">va_list</span> ap<span class="op">;</span></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>  <span class="dt">int</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>  <span class="dt">int</span> soma <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a>  va_start<span class="op">(</span>ap<span class="op">,</span> arg1<span class="op">);</span> </span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a>  <span class="cf">for</span> <span class="op">(</span>i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> count<span class="op">;</span> i<span class="op">++)</span></span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a>    soma <span class="op">+=</span> va_arg<span class="op">(</span>ap<span class="op">,</span> <span class="dt">int</span><span class="op">);</span></span>
<span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a>  va_end<span class="op">(</span>ap<span class="op">);</span></span>
<span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> soma<span class="op">;</span></span>
<span id="cb3-17"><a href="#cb3-17" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb3-18"><a href="#cb3-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-19"><a href="#cb3-19" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> main<span class="op">(</span><span class="dt">void</span><span class="op">)</span></span>
<span id="cb3-20"><a href="#cb3-20" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb3-21"><a href="#cb3-21" aria-hidden="true" tabindex="-1"></a>   printf<span class="op">(</span><span class="st">&quot;</span><span class="sc">%i</span><span class="st">&quot;</span><span class="op">,</span> somatorio<span class="op">(</span><span class="dv">2</span><span class="op">,</span> <span class="dv">1</span><span class="op">,</span> <span class="dv">3</span><span class="op">));</span></span>
<span id="cb3-22"><a href="#cb3-22" aria-hidden="true" tabindex="-1"></a>   <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb3-23"><a href="#cb3-23" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<h3 id="esse-programa-produz-a-saída-1">Esse programa produz a saída:</h3>
<pre><code>4</code></pre>
<h1 id="stdbit.h">stdbit.h</h1>
<p>Tratamento e criação de novos tipos de dados primitivos parecem ser um tema para o C Moderno. Foi introduzido um completo novo módulo da biblioteca padrão para justamente trazer novas operações e utilidades para números binários. Agora vou trazer uma quote traduzida da especificação atual do C23</p>
<blockquote>
<p>O Header <code>&lt;stdbit.h&gt;</code> define macros, tipos e funções para trabalhar com a representação binária e byte de diversos tipos, tipicamente tipos inteiros. Esse header torna disponível o tipo <code>size_t</code> e qualquer tipo <code>uintN_t</code>, <code>intN_t</code>, <code>uint_leastN_T</code>, ou <code>int_leastN_t</code> definidos pela implementação.</p>
</blockquote>
<p>Algumas de suas funcionalidades interessantes:</p>
<ul>
<li><p>Funções para contagem de zeros/uns consecutivos no início e fim da stream;</p></li>
<li><p>Funções para verificar o primeiro e último valor de uma stream.</p></li>
<li><p>Checagem de um único bit</p></li>
<li><p>Computação do menor número de bits possível para armazenar um valor.</p></li>
</ul>
<p>Imagino que funções oferecidas pelo <code>&lt;stdbit.h&gt;</code> sejam interessantes para quem trabalha com processamento de sinais, imagens ou arquivos binários.</p>
<h1 id="multi-threading-na-biblioteca-padrão">Multi-threading na biblioteca padrão</h1>
<p>Multi-threading estava presente desde C11, no entanto eu considero isso um recurso de C moderno vejo esse recurso sendo um tanto subutilizado em relação os outros recursos. Geralmente quando vejo alguém utilizando threads na linguagem C, vejo ela utilizando as bibliotecas oferecidas pelo próprio sistema operacional, como POSIX threads ou as threads da WINAPI.</p>
<p>Os primitivos de threads do C moderno estão definidas no cabeçalho <code>&lt;threads.h&gt;</code>, tal que contém funções para criação, destruição de threads e passagem de mensagem entre as threads. Também existe outro cabeçalho que vai par a par com <code>&lt;threads.h&gt;</code> chamada <code>&lt;stdatomic.h&gt;</code>, que define tipos de dados atômicos – aqueles feitos para serem compartilhado entre threads.</p>
    </section>
</article>
]]></description>
    <pubDate>Sun, 24 Nov 2024 00:00:00 UT</pubDate>
    <guid>https://algumcorrupto.github.io/IFF-depressao//posts/2024-11-24-c-moderno.html</guid>
    <dc:creator>Paulo Villaça</dc:creator>
</item>
<item>
    <title>A linguagem de programação C</title>
    <link>https://algumcorrupto.github.io/IFF-depressao//posts/2024-11-19-c1.html</link>
    <description><![CDATA[<article>
    <section class="title">A linguagem de programação C</section>
    <p class="filler">=========================================</p>
    <section class="header">
        Postado em November 19, 2024
        
            por Paulo
        
    </section>
    <section class="body">
        <p>Nesse artigo vamos ver a estrutura básica de um programa escrito em C, variáveis, tipos, entrada/saída básica entre outros.</p>
<p>C é uma linguagem de programação criada em Bell Labs por Brian Kerninghan e Dennis Ritchie por volta dos anos 70 para sistemas UNIX como uma ferramenta para facilitar o processo de desenvolvimento de aplicações, convertendo código que seria mais fácil um humano entender para código de máquina, esse processo é feito por um programa chamado <u>compilador</u>.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="co">//Um programa de C tem estrutura básica:</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> main<span class="op">()</span> <span class="op">{</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>    <span class="co">// código começa a ser executado aqui </span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span> <span class="co">// programa finaliza nessa linha</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Sendo que o programa começa ser executado linha por linha dentro da função <code>main</code>. Funções são como bloco de código reusáveis. É possível o programador definir sua próprias funções, usar elas e até aproveitar funções feitas por outros programadores, veremos mais sobre funções no futuro.</p>
<blockquote>
<p>Obs: Tudo em uma linha que vem depois do símbolo <code>//</code> ou que está colorido na cor verde é considerado um <u>comentário</u> e é apenas usado para documentação de seu programa.</p>
</blockquote>
<h1 id="variáveis-e-tipos">Variáveis e tipos</h1>
<h3 id="exemplo-1">Exemplo 1</h3>
<div class="sourceCode" id="cb2"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="co">// Exemplo de criação de variáveis 1</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> main<span class="op">()</span> <span class="op">{</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> meuNumero <span class="op">=</span> <span class="dv">69</span><span class="op">;</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Nesse exemplo, estou criando uma variável chamada <code>meuNumero</code>de tipo <code>int</code> – significa que é um inteiro – com valor atribuido <code>69</code>.</p>
<h3 id="exemplo-2">Exemplo 2</h3>
<div class="sourceCode" id="cb3"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="co">// Exemplo de criação de variáveis 2</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> main<span class="op">()</span> <span class="op">{</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> numero1 <span class="op">=</span> <span class="dv">34</span><span class="op">;</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> numero2 <span class="op">=</span> numero1 <span class="op">+</span> <span class="dv">35</span><span class="op">;</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Nesse outro exemplo, crio duas variáveis. As duas de tipo <code>int</code>, respectivamente chamadas <code>numero1</code>e <code>numero2</code>.</p>
<ul>
<li><p><code>numero1</code> tem o valor <code>34</code></p></li>
<li><p><code>numero2</code> tem o valor <code>35</code> + <code>numero1</code> quese transforma em <code>35 + 34</code>. Então o valor do <code>numero2</code> é <code>69</code>.</p></li>
</ul>
<h3 id="exemplo-3">Exemplo 3</h3>
<div class="sourceCode" id="cb4"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="co">// Exemplo de criação de variáveis 3</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> main<span class="op">()</span> <span class="op">{</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> n <span class="op">=</span> <span class="dv">3</span><span class="op">;</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> n <span class="op">=</span> <span class="dv">4</span><span class="op">;</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>É possível criar variáveis e logo depois mudar seu valor. Variáveis em C não são como variáveis na matemática, em que são constantes e imutáveis.</p>
<h2 id="tipos">Tipos</h2>
<p>Além do tipo <code>int</code> existem outros tipos de dados primitivos em C, os principais sendo:</p>
<table>
<thead>
<tr class="header">
<th>Nome</th>
<th>Significado</th>
<th>Exemplo</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>int</code></td>
<td>Equivalente a um número inteiro na Matemática.</td>
<td><code>38</code>, <code>23</code>, <code>11</code></td>
</tr>
<tr class="even">
<td><code>float</code></td>
<td>Equivalente um número com casas decimais.</td>
<td><code>2.2</code>, <code>4.0</code>, <code>0.01</code></td>
</tr>
<tr class="odd">
<td><code>char</code></td>
<td>Um caractere</td>
<td><code>'G'</code>, <code>'3'</code>, <code>'#'</code>, <code>\0</code></td>
</tr>
</tbody>
</table>
<p>Além desses tipos, existe um tipo de dados que não é primitivo mas é bastante utilizado em geral. Esse tipo de dado chama-se <code>string</code>, em que é uma lista de caracteres deliminado pelo <u>caractere nulo</u> <code>'\0'</code>.</p>
<blockquote>
<p>Obs: o caractere nulo é um <u>backspace character</u>, isso essencialmente significa que ele está atrelado a nenhum símbolo gráfico, mas sim a uma funcionalidade. Alguns de outros caracteres desse tipo são o <code>'\n'</code> – nova linha – e <code>'\t'</code> – tab.</p>
</blockquote>
<div class="sourceCode" id="cb5"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="co">// Sintaxe das strings em C</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> main<span class="op">()</span> <span class="op">{</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>    <span class="dt">char</span> meuCaractere <span class="op">=</span> <span class="ch">&#39;$&#39;</span><span class="op">;</span>            <span class="co">// isso é um caractere</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>    <span class="dt">char</span> meuTexto<span class="op">[]</span> <span class="op">=</span> <span class="st">&quot;Socorro!</span><span class="sc">\0</span><span class="st">&quot;</span><span class="op">;</span>     <span class="co">// isso é uma string</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<blockquote>
<p>Obs: Note a diferença! Para declarar o valor de um caractere utiliza-se aspas simples ’’, já em strings utiliza-se aspas duplas ““. Também em strings utiliza-se colchetes logo depois do nome da variável (isso é notação de lista, assunto que veremos depois).</p>
</blockquote>
<h1 id="entradasaída-e-a-biblioteca-padrão">Entrada/Saída e a biblioteca padrão</h1>
<p>Até o momento, nós vimos o que são variáveis e tipos. Mas ainda não fazemos interação com o usuário. Se nós rodarmos os programas dos exemplos anteriores nada vai aparecer na tela ou terminal do usuário.</p>
<p>Um conjunto de funções, constantes e variáveis de uso genérico e reusáveis chama-se <u>biblioteca</u> ou <u>library</u> em inglês. A linguagem C tem uma biblioteca padrão que contém funções como de Entrada/Saída, operações com strings, matemática que é padronizado para compiladores de todos os sistemas operacionais, referimos esse conjunto de “coisas” como <u>biblioteca padrão</u> ou em inglês <u>standard library</u> ou simplesmente <u>std</u>.</p>
<p>Podemos incluir partes de uma biblioteca usando a diretiva <code>include</code>. No exemplo logo abaixo vou incluir uma biblioteca chamada <code>stdio</code> – A biblioteca padrão referente a Entrada/Saída – e chamar uma de suas funções <code>printfs()</code>, que escreve o que está entre parênteses na tela do usuário.</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="co">// Exemplo de Saida</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;stdio.h&gt;</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> main<span class="op">()</span> <span class="op">{</span></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a>    printf<span class="op">(</span><span class="st">&quot;Ola mundo!&quot;</span><span class="op">);</span></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Saída:</p>
<pre><code>Ola mundo!</code></pre>
<p>Além de poder escrever coisas na tela, é possível também ler a entrada do teclado. Para isso podemos usar a função <code>gets()</code>.</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="co">// Exemplo de Entrada/Saida</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;stdio.h&gt;</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> main<span class="op">(){</span></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>    <span class="dt">char</span> meuNome<span class="op">[</span><span class="dv">100</span><span class="op">];</span>              <span class="co">// coloco um valor arbitrariamente grande para ser meu buffer</span></span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a>    printf<span class="op">(</span><span class="st">&quot;Fale o seu nome:</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">);</span>    <span class="co">// caractere \n significa que é o fim da linha.</span></span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a>    gets<span class="op">(</span>meuNome<span class="op">);</span></span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a>    printf<span class="op">(</span><span class="st">&quot;Ola </span><span class="sc">%s</span><span class="st">!</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span> minhaEntrada<span class="op">);</span> </span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb8-11"><a href="#cb8-11" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Exemplo de saída:</p>
<pre><code>Fale o seu nome
Paulo
Ola Paulo!</code></pre>
<p>Vocês devem ter notado o <code>%s</code> no segundo <code>printf</code>. <code>%s</code> Marca a posição de uma string (nesse caso minhaEntrada), na saída. Essas mini expressões que começam com <code>%</code> são usados para concatenar dados que geramente vem de variáveis na saída usando o <code>printf</code> e o segundo caractere dessas expressões representa qual é o tipo da variável que você quer representar.</p>
<p>Aqui está uma tabela representado os principais especificadores:</p>
<table>
<thead>
<tr class="header">
<th>Spec.</th>
<th>Saída</th>
<th>Ex.</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>d</td>
<td>Números inteiros com formatação base 10</td>
<td>1, -2, 500</td>
</tr>
<tr class="even">
<td>x</td>
<td>Números inteiros com formatação hexadecimal</td>
<td>0xFF, 0ED</td>
</tr>
<tr class="odd">
<td>f</td>
<td>Números de ponto flutuantes (floats)</td>
<td>3.14, 1/2, 4.0</td>
</tr>
<tr class="even">
<td>c</td>
<td>Caracteres</td>
<td>a, b, %</td>
</tr>
<tr class="odd">
<td>s</td>
<td>Strings</td>
<td>palavra</td>
</tr>
</tbody>
</table>
<p>Como vocês notaram a função <code>gets()</code> espera um buffer de tipo <code>string</code> como argumento. Caso seu programa queira converter uma variável tipo <code>string</code> para tipo <code>int</code>, é utilizado a função <code>atoi()</code>, que pega como um argumento uma <code>string</code> válido e retorna um <code>int</code>, caso o contrário seu programa entra em pânico e crasha.</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="co">// Programa demonstrando o uso de função atoi()</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;stdio.h&gt;</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;stdlib.h&gt;</span></span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> main<span class="op">()</span> <span class="op">{</span></span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a>    <span class="dt">char</span> str1<span class="op">[]</span> <span class="op">=</span> <span class="st">&quot;141&quot;</span><span class="op">;</span></span>
<span id="cb10-7"><a href="#cb10-7" aria-hidden="true" tabindex="-1"></a>    <span class="dt">char</span> str2<span class="op">[]</span> <span class="op">=</span> <span class="st">&quot;3.14&quot;</span><span class="op">;</span> <span class="co">// Note que esse é um número decimal</span></span>
<span id="cb10-8"><a href="#cb10-8" aria-hidden="true" tabindex="-1"></a>  </span>
<span id="cb10-9"><a href="#cb10-9" aria-hidden="true" tabindex="-1"></a>    <span class="co">// Usando atoi() para converter strings em números inteiros</span></span>
<span id="cb10-10"><a href="#cb10-10" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> num1 <span class="op">=</span> atoi<span class="op">(</span>str1<span class="op">);</span></span>
<span id="cb10-11"><a href="#cb10-11" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> num2 <span class="op">=</span> atoi<span class="op">(</span>str2<span class="op">);</span> <span class="co">// como int tipo de número inteiro, 3.14 vira apenas 3</span></span>
<span id="cb10-12"><a href="#cb10-12" aria-hidden="true" tabindex="-1"></a>  </span>
<span id="cb10-13"><a href="#cb10-13" aria-hidden="true" tabindex="-1"></a>    <span class="co">// Fazendo uma operação aritmética</span></span>
<span id="cb10-14"><a href="#cb10-14" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> soma <span class="op">=</span> num1 <span class="op">+</span> num2<span class="op">;</span></span>
<span id="cb10-15"><a href="#cb10-15" aria-hidden="true" tabindex="-1"></a>    printf<span class="op">(</span><span class="st">&quot;</span><span class="sc">%d</span><span class="st"> + </span><span class="sc">%d</span><span class="st"> = </span><span class="sc">%d</span><span class="st">&quot;</span><span class="op">,</span> num1<span class="op">,</span> num2<span class="op">,</span> soma<span class="op">);</span></span>
<span id="cb10-16"><a href="#cb10-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-17"><a href="#cb10-17" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb10-18"><a href="#cb10-18" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Saída:</p>
<pre><code>141 + 3 = 144</code></pre>
<p>Também existe um função análoga que converte <code>string</code> em números <code>floats</code> chamada <code>atof()</code>.</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="co">// Programa demonstrando o uso de função atof()</span></span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;stdio.h&gt;</span></span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;stdlib.h&gt;</span></span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-5"><a href="#cb12-5" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> main<span class="op">()</span> <span class="op">{</span></span>
<span id="cb12-6"><a href="#cb12-6" aria-hidden="true" tabindex="-1"></a>    <span class="dt">char</span> str1<span class="op">[]</span> <span class="op">=</span> <span class="st">&quot;141&quot;</span><span class="op">;</span> <span class="co">// note que esse número é inteiro</span></span>
<span id="cb12-7"><a href="#cb12-7" aria-hidden="true" tabindex="-1"></a>    <span class="dt">char</span> str2<span class="op">[]</span> <span class="op">=</span> <span class="st">&quot;3.14&quot;</span><span class="op">;</span></span>
<span id="cb12-8"><a href="#cb12-8" aria-hidden="true" tabindex="-1"></a>  </span>
<span id="cb12-9"><a href="#cb12-9" aria-hidden="true" tabindex="-1"></a>    <span class="co">// Usando atof() para converter strings em números floats</span></span>
<span id="cb12-10"><a href="#cb12-10" aria-hidden="true" tabindex="-1"></a>    <span class="dt">float</span> num1 <span class="op">=</span> atof<span class="op">(</span>str1<span class="op">);</span> <span class="co">// como float é tipo decimal, 141 vira 141.0</span></span>
<span id="cb12-11"><a href="#cb12-11" aria-hidden="true" tabindex="-1"></a>    <span class="dt">float</span> num2 <span class="op">=</span> atof<span class="op">(</span>str2<span class="op">);</span> </span>
<span id="cb12-12"><a href="#cb12-12" aria-hidden="true" tabindex="-1"></a>  </span>
<span id="cb12-13"><a href="#cb12-13" aria-hidden="true" tabindex="-1"></a>    <span class="co">// Fazendo uma operação aritmética</span></span>
<span id="cb12-14"><a href="#cb12-14" aria-hidden="true" tabindex="-1"></a>    <span class="dt">float</span> soma <span class="op">=</span> num1 <span class="op">+</span> num2<span class="op">;</span></span>
<span id="cb12-15"><a href="#cb12-15" aria-hidden="true" tabindex="-1"></a>    printf<span class="op">(</span><span class="st">&quot;</span><span class="sc">%f</span><span class="st"> + </span><span class="sc">%f</span><span class="st"> = </span><span class="sc">%f</span><span class="st">&quot;</span><span class="op">,</span> num1<span class="op">,</span> num2<span class="op">,</span> soma<span class="op">);</span></span>
<span id="cb12-16"><a href="#cb12-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-17"><a href="#cb12-17" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb12-18"><a href="#cb12-18" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Saída:</p>
<pre><code>141.0 + 3.14 = 144.14</code></pre>
<h1 id="conclusão">Conclusão</h1>
<p>Com isso eu finalizo esse artigo. Se vocês gostarem dele, eu posso torna-lo numa série explicando mais sobre a linguagem C.</p>
    </section>
</article>
]]></description>
    <pubDate>Tue, 19 Nov 2024 00:00:00 UT</pubDate>
    <guid>https://algumcorrupto.github.io/IFF-depressao//posts/2024-11-19-c1.html</guid>
    <dc:creator>Paulo Villaça</dc:creator>
</item>
<item>
    <title>Período de matrícula</title>
    <link>https://algumcorrupto.github.io/IFF-depressao//posts/2024-08-07-matricula.html</link>
    <description><![CDATA[<article>
    <section class="title">Período de matrícula</section>
    <p class="filler">=========================================</p>
    <section class="header">
        Postado em August  7, 2024
        
            por Paulo
        
    </section>
    <section class="body">
        <p>Olá bom dia, esse é meu segundo artigo aqui, eu gostaria de começar relatando quão frustrante foi a minha matrícula no IFF, ela foi bem caótica e achava que por pouco perdia essa matrícula.
Foi um processo bastante estressante e acho que meus colegas devem compartilhas de algumas frustações que me ocorreram…</p>
<p>Primeiramente, quando a lista de convocados saiu, eu havia ficado bastante surpreso pelo fato de eu ter sido colocado em 2° lugar pela cota pública, eu sim estudei, mas não achava que isso era o bastante para ser segundo lugar. Isso me fez ficar bastante contente.</p>
<p>Eles publicaram um edital falando que em breve os convocados iriam ser chamados para a matrícula. Os dias passaram, semanas passaram e nenhuma data havia sido publicada. Tive eu a brilhante ideia de perguntar algum conhecido sobre a data da matrícula, esse indivíduo falou comigo que o período da matrícula havia passado e que eu havia perdido ele, eu então entrei em pânico e essa pessoa começa a refutar-me piorando ainda mais a situação, fui para o banheiro refletir por uns 15 minutos aí tomei a decisão de andar 3,3 KM até o campus do IFF centro para pedir informação. 3,3 KM de ida e volta que resultam em 6,6 KM andando a pé! Acabou que uma funcionária de lá falou que eles ainda estavam em greve e a data que essa pessoa de antes falou comigo estava invalidada. Eu fiquei aliviado, perdi uma aula de geometria mas fiquei aliviado.</p>
<p>Uma semana passou então o período da matrícula chegou. Minha mãe que gosta de fazer essas coisas bem cedo me acordou. Isso foi entre 5h30 e 6h00 da manhã, eles ainda nem haviam publicado o formulário da matrícula, ok irei tentar mais tarde. Tentei fazer o formulário as 10h00 da manhã e para minha surpresa encontro um site quebrado! Durante o período que o formulário foi publicado até 15h00 daquele dia era impossível completar o formulário. Eu com minha mãe fomos lá no campus, isso foi umas 13h00 da tarde, fui tentar fazer o formulário lá, como eu já havia falado o formulário só voltou a funcionar 15h00, então eu tive que esperar lá dentro por 2 horas até os indivíduos brilhantes :) do setor de TI consertarem o problema. Dentro do campus encontrei alguns colegas da minha antiga escola, inclusive foi por eles que eu fiquei sabendo de algumas coisas que eu falei no artigo passado. Enfim, 15h chegou, completei o formulário e fui para a casa. Eu não sei dizer se o período da matrícula foi provogado, seria ideal se acontecesse.</p>
<p>Pelo portal do governo eu consigo monitorar o status da minha matrícula, ela primeiramente entra em um estado de espera de análise e quando essa análise for feita, se houver informações inválidas, o formulário será aberto novamente para o preenchimento dos dados não-presentes. Ocorreu um problema muito grande em que para todos os alunos do superior que haviam passado por cota, os dados que validam a cota não eram salvos. Então TODOS nós tivemos que enviar seus dados novamente, ok isso foi um processo bem trivial para mim. No momento que o formulário abriu para a reposição de dados eu enviei as informações atualizadas, qual é o problema? O problema é que uma instituição que fornece mais de 2 graduações de TI + alguns quebrados incapaz de fazer um serviço online funcional, e um serviço vital como esse que é matrícula de alunos. Provavelmente muitas pessoas acabaram perdendo a matrícula por ingenuidade da instituição, isso me deixa bastante furioso e isso é algo que me faz refletir sobre a qualidade do ensino oferecida aí. Outro problema é a falta de transparência diante os problemas, eu lembro de haver uma postagem no instagram anunciando o período de matrícula e vi muitas pessoas reclamando do formulário quebrado, horas depois não encontro esses comentários, os administradores da conta haviam apagado eles.</p>
    </section>
</article>
]]></description>
    <pubDate>Wed, 07 Aug 2024 00:00:00 UT</pubDate>
    <guid>https://algumcorrupto.github.io/IFF-depressao//posts/2024-08-07-matricula.html</guid>
    <dc:creator>Paulo Villaça</dc:creator>
</item>
<item>
    <title>Olá Pessoal</title>
    <link>https://algumcorrupto.github.io/IFF-depressao//posts/2024-08-06-ola.html</link>
    <description><![CDATA[<article>
    <section class="title">Olá Pessoal</section>
    <p class="filler">=========================================</p>
    <section class="header">
        Postado em August  6, 2024
        
            por Paulo
        
    </section>
    <section class="body">
        <p>Eu acabei de finalizar o protótipo desse blog e esse é o primeiro artigo a ser publicado. Gostaria primeiramente apresentar-me.
Olá eu sou o Paulo se você viu a página inicial, deve saber um pouco sobre mim, sou o autor dessa página e futuro aluno do curso
de Engenharia da Computação. Eu curto criar coisas, decidi criar esse site para documentar minha jornada no ensino superior.</p>
<p>Eu prototipei esse website numa madrugada. Semana passada havia autorado um outro blog com meu amigo, o problema que decidi fazer ele fullstack e agora encontro problemas relacionado a sua hospedagem. É um blog de review de álbuns, tem seu próprio sistema de login, ferramenta de pesquisa e agora está pegando poeira num repositório no github. No futuro esperamos conseguir hospedar ele.</p>
<p>Esse site provavelmente ficará mais ativo quando eu realmente começar a estudar. Eu tenho um colega que estudou comigo no ensino médio que está fazendo esse mesmo curso, segundo ele existem vários clubes extra curriculares que os alunos podem participar. O que chamou minha atenção foi o clube de robótica em que eles recentemente fizeram um drone de corrida.</p>
<p>Agora falando das coisas deprimentes, notei na grade curricular bastante tempos de física, cálculo.
Pensava que das 07h até as 17h40 era cansativo no ensino médio… Não imaginava que o superior seria ainda mais cansativo, das 07h até as 20h… Eu confesso que durante o ensino médio fui bem ruim nas matérias que não faziam parte da grade do técnico. Peguei o primeiro ano na pândemia e o resto do meu tempo lá foi uma bagunça, muitos professores que originalmente davam aulas foram para cargos administrativos… Realmente espero que não haja mais confusões desse tipo durante o meu ensino superior :).</p>
<p>Vou parar por aqui, já que esse foi apenas um artigo de testes… Caso tenha alguma sugestão ou queira conectar mande um e-mail para pauloarturvillaca@gmail.com, eu prometo que tentarei ler a minha inbox e se você for um colega, boa sorte nessa jornada!</p>
    </section>
</article>
]]></description>
    <pubDate>Tue, 06 Aug 2024 00:00:00 UT</pubDate>
    <guid>https://algumcorrupto.github.io/IFF-depressao//posts/2024-08-06-ola.html</guid>
    <dc:creator>Paulo Villaça</dc:creator>
</item>

    </channel>
</rss>
