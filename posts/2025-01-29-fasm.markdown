---
title: 3 Maneiras de Escrever "Hello World" em ASM
author: Paulo
---

Eu durante essas as férias do final de ano explorei alguns novos assuntos, inclusive algumas coisas relacionadas a 
linguagem de programação amd64 linux e quero compartilhar alguns de dos meus estudos aqui.

Assembly é uma linguagem de programação de nível baixo, significa que ela traduz 1:1 para o comportamento das CPUs, existem vários assemblers -- que são programas que
traduzem texto de assembly para machine code, cada assembler tem suas variações, hoje eu vou trabalhar com o Flat Assembler. Além disso existem várias sintaxes 
para representar código em assembly, os mais famosos sendo a sintaxe do GNU Assembly, Sintaxe da A&T e a Sintaxe da Intel. Vamos usar nesse artigo a sintaxe da Intel -- a que eu acho mais legível. a diferença mais impactante entre o A&T e Intel é a ordem dos argumentos da instrução, sendo que:

- A instrução na sintaxe intel tem estrutura básica: ``<instrução> <saída> <entrada>``

- Enquanto na sintaxe A&T tem estrutura básica: ``<instrução> <entrada> <saída>``

Compiladores GNU também podem gerar código assembly para nós, se especificarmos a flag ``-S``, e gerar código na sintaxe intel com a flag ``-masm``. 
Tente escrever um simples Olá Mundo em C e use esse comando de compilação (assumindo que o nome do seu programa é hello.c) ``gcc hello.c -S -masm=intel -o hello.asm``. 

O código gerado pode ser parecido com isso:

```asm
	.file	"hello.c"
	.intel_syntax noprefix
	.text
	.section	.rodata
.LC0:
	.string	"Ola Mundo"
	.text
	.globl	main
	.type	main, @function
main:
.LFB0:
	.cfi_startproc
	push	rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	mov	rbp, rsp
	.cfi_def_cfa_register 6
	lea	rax, .LC0[rip]
	mov	rdi, rax
	call	puts@PLT
	mov	eax, 0
	pop	rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE0:
	.size	main, .-main
	.ident	"GCC: (GNU) 14.2.1 20240910"
	.section	.note.GNU-stack,"",@progbits
```

Essa esse é o assembly gerado por um simples Olá Mundo, percebe-se que o assembly gerado é muito grande e complexo, não? Nós podemos fazer que esse código fique muito menor, vamos ver algumas maneiras de re-escrever esse programa usando FASM!



# Método 1

Primeiro antes de tudo, vamos recapitular 3 conceitos importantes, que todo programador de assembly precisa saber: instruções, memória e syscalls.

### Instruções

Instruções é o qu são executadas pelo processador, todo processador que se prese implementa 2 tipos de instruções, a de manipulação de memória e aritmética.

### Memória

Existem 3 níveis de memória numa máquina Von Neumann:

- Registradores: Memória embutida na CPU, geralmente contendo um número pequeno deles, em amd64 existem 48 registradores (registradores de uso específico como o Program Counter inclusos), todos com 64 bits de largura, valores são trazidos da memória RAM e armazenados em registradores para uso imediato.

- Memória RAM: Instruções quando não estão sendo executadas e outros objetos omo variáveis são armazenadas aqui

- Memória secundária: (HDD, SSD) arquivos estáticos são armazenados aqui, interface com a memória secundária é feita pelas chamadas de sistema ou instruções de I/O.

### Syscalls

Em sistemas operacionais existem 2 conceitos importantes, <u>user-mode/userland</u> e <u>kernel-mode/kernelland</u>. A parte core do sistema operacinal -- que lida com I/O de hardware, implementação de protocolos de redes, scheduling de processos, chama-se kernel. Já os diversos outros programas são rodados em user-mode, que por segurança não tem acesso as essas instruções privilegiadas e perigosas, então esses programas user-mode precisam solicitar para o kernel fazer essas tarefas para ele, e a maneira que esses programas solicita serviços é por meio das <u>syscalls</u> ou <u>chamadas de sistema</u>.

Cada syscall tem um ID, e a maneira em que elas são chamadas as syscalls (ou qualquer rotina em assembly) movendo os valores certos para os registradores certos e chamar a instrução ``syscall``.
No linux eu uso essa tabela como referência para as diversas syscalls https://blog.rchapman.org/posts/Linux_System_Call_Table_for_x86_64/.
Por exemplo para escrever alguma coisa no terminal deve-se executar esse algoritmo

- Mover valor 1 para o registrador ``rax`` (ID da ssyscall)

- Mover valor 1 para o registrador ``rdi`` (ID para stdout)

- Mover o endereço do começo do meu texto para ``rsi``

- Mover o tamanho do meu texto para ``rdx``

- Fazer a Chamada

Alguns exemplos de syscalls: manipulação de arquivos no disco rígido, escrita no stdout (terminal), criação de novos processos, criação de sockets.

### Peculiaridades do FASM

Cada assembler tem suas próprias peculiaridades na forma de escrever o assembly, no FASM existem o que é chamado de diretivas, que são algumas funcionalidades que definem comportamento extras na hora do assembler gerar o arquivo binário. Por exemplo a diretiva ``format`` define qual o formato do arquivo gerar como saída, ``segment`` define as permissões de cada segmento de código (pensa como se fosse o chmod do linux e ``entry`` define a partir de qual <u>label</u> devo começar a executar o programa.

Obs: label é basicamente um nome para uma posição de alguma instrução no programa, nada demais.

### O código em si

Sem mais demora aqui está Olá Mundo em FASM:

```asm
format ELF64 executable

segment readable executable

entry main
main:
   mov rax, 1           ;; mover ID da syscall write (basicamente printf do C) para rax
   mov rdi, 1           ;; mover ID da flag stdout para rdi
   mov rsi, msg         ;; mover endereço do começo do meu texto para rsi
   mov rdx, msg_len     ;; mover o tamanho da minha mensagem para rdx
   syscall              ;; efetuar a syscall

   mov rax, 60          ;; mover ID da syscall para terminar o programa seguramente (masicamente o return do C)
   mov rdi, 0           ;; mover código de retorno, para rdi
   syscall              ;; efetuar a chamada de sistema
segment readable writable
msg db "Ola Mundo!", 10 ;; defini uma string de bytes no final do arquivo contendo "Ola Mundo!\n" (10 é o código para \n)
msg_len = $-msg         ;; defino o tamanho da mensagem sendo $ (o endereço da linha atual) - (menos) msg (o endereço do começo da mensagem)
```

# Método 2

Já ouviu falar de macros do C/C++? Eles também estão presentes no fasm, com isso é possível refatorar esse primeiro código

Caso não sabia o que é macros, eles são unidades de códigos reusávies que você define e que são literalmente copiados e colados nos lugares que 
são chamados.

### Preste atenção de como agora ficou a rotina main:

```asm
entry main
main:
  print hello, hello.size
  print goodbye, goodbye.size
  return 0

segment readable writable

hello string "Hello, World!", 10
goodbye string "Goodbye, World!", 10

```

Nem parece assembly!

### Agora o código completo comentado:

```asm 
format ELF64 executable

segment readable executable
macro print msg, size { ;; transformei o boilerplate de imprimir mensagens numa macro
   mov rax, 1           ;; mover ID da syscall write (basicamente printf do C) para rax
   mov rdi, 1           ;; mover ID da flag stdout para rdi
   mov rsi, msg         ;; mover endereço do começo do meu texto para rsi
   mov rdx, msg_len     ;; mover o tamanho da minha mensagem para rdx
   syscall              ;; efetuar a syscall
}



macro return retcode {
   mov rax, 60          ;; mover ID da syscall para terminar o programa seguramente (masicamente o return do C)
   mov rdi, 0           ;; mover código de retorno, para rdi
   syscall              ;; efetuar a chamada de sistema

}

entry main
main:
  print hello, hello.size
  print goodbye, goodbye.size
  return 0

segment readable writable
struc string [data] {   ;; estou declarando uma macro para meu tipo de dado string
  common
    . db data           ;; "." simboliza o nome da variável atual por exemplo ali embaixo a variável "hello"
    .size = $-.         ;; ".size" simboiza alguma coisa tipo "hello.size"
}

hello string "Hello, World!", 10
goodbye string "Goodbye, World!", 10
```

# Método 3

Também podemos linkar nosso código assembly com bibliotecas externas (como libc, raylib, sdl), usando o ld. Linkando com a libc nos permite usar funções da biblioteca padrão da linguagem C em nosso assembly!

existe uma convenção sobre quais registradores usar quando passar argumentos para funções, do primeiro ao sétimo argumento da função são passados respectivamente para os regirstradores: rdi, rsi, rdx, rdx, rcx, r8, r9; o resto dos parâmetros são dados no stack.

Tudo que basta é declarar os símbolos como ``extern`` e usar esse script para compilar o programa (assumindo que o nome do seu programa chama-se printf.asm)

```bash
#!/bin/bash

fasm printf.asm
ld printf.o -o printf -dynamic-linker /lib/ld-linux-x86-64.so.2 -lc
```

### Le source code

```asm
format ELF64

section '.text' executable
public _start
extrn printf
extrn _exit

_start:
  mov rdi, msg
  mov rsi, 0
  call printf
  mov rdi, 0
  call _exit

section '.data' writable
  msg db "Hello printf", 10
```

# Método bônus (Quine em FASM!!!)

Quine é o nome de uma técnica usada para incluir o código fonte da própria aplicação nela mesma, presumo que seja importante para aplicações relacionadas à debugging.

No quine você pode incluir arquivos no próprio executável em tempo de compilação, recurso que linguagens de alto nível não tem.

O código é baseado no método 1 e a única alteração foi na penúltima linha, utilizei a diretiva ``file`` para poder concatenar o conteúdo do meu código fonte no binário (assumindo que o código fonte chama-se quine.asm).

```asm
format ELF64 executable

entry start
start:
   mov rax, 1
   mov rdi, 1
   mov rsi, src
   mov rdx, srcsize
   syscall

   mov rax, 60
   mov rdi, 0
   syscall

segment readable writable
src file "quine.asm"
srcsize = $-src
```
